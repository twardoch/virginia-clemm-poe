# this_file: pyproject.toml

[build-system]
requires=["hatchling", "hatch-vcs"]
build-backend="hatchling.build"

[project]
name="virginia-clemm-poe"
dynamic=["version"]
description="A Python package providing programmatic access to Poe.com model data with pricing information"
readme="README.md"
requires-python=">=3.12"
license={text="Apache-2.0"}
authors=[
    {name="Adam Twardoch", email="adam+github@twardoch.com"},
]
classifiers=[
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
dependencies=[
    "httpx>=0.24.0",
    "playwrightauthor>=1.0.6",
    "beautifulsoup4>=4.12.0",
    "pydantic>=2.5.0",
    "fire>=0.5.0",
    "rich>=13.0.0",
    "loguru>=0.7.0",
    "aiohttp>=3.9.0",
    "psutil>=5.9.0",
    "mkdocs-material>=9.6.16",
    "mkdocstrings[python]>=0.30.0",
]

[project.scripts]
virginia-clemm-poe="virginia_clemm_poe.__main__:main"

[project.urls]
Homepage="https://github.com/twardoch/virginia-clemm-poe"
Repository="https://github.com/twardoch/virginia-clemm-poe"
Issues="https://github.com/twardoch/virginia-clemm-poe/issues"

[tool.hatch.version]
source="vcs"

[tool.hatch.build.hooks.vcs]
version-file="src/virginia_clemm_poe/_version.py"

[tool.hatch.metadata]
allow-direct-references=true

[tool.ruff]
target-version="py312"
line-length=120
extend-exclude=[
    "old/",
    "external/",
    "tests/fixtures/",
    ".venv",
    "build/",
    "dist/",
]

[tool.ruff.lint]
# Enable comprehensive linting rules for code quality
select=[
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # pyflakes
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "I",      # isort
    "N",      # pep8-naming
    "D",      # pydocstyle
    "C4",     # flake8-comprehensions
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PL",     # pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "PERF",   # perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "G",      # flake8-logging-format
]

ignore=[
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring (conflicts with D211)
    "D213",   # Multi-line docstring summary should start at the second line (conflicts with D212)
    "PLR0913", # Too many arguments to function call
    "TRY003",  # Avoid specifying long messages outside the exception class
    "PLR2004", # Magic value used in comparison
    "B008",    # Do not perform function calls in argument defaults (fire compatibility)
    "ARG002",  # Unused method argument (common in overrides)
]

[tool.ruff.lint.per-file-ignores]
# Allow specific patterns in test files
"tests/**/*.py"=[
    "D",      # No docstring requirements in tests
    "ARG",    # Unused arguments common in test fixtures
    "PLR2004", # Magic values acceptable in tests
    "SLF001",  # Private member access acceptable in tests
    "TRY301",  # Abstract raise to an inner function is acceptable
]

# CLI entry points can have print statements
"src/virginia_clemm_poe/__main__.py"=["T20"]

# Configuration files don't need docstrings
"src/virginia_clemm_poe/config.py"=["D"]

[tool.ruff.lint.pydocstyle]
convention="google"

[tool.ruff.lint.isort]
known-first-party=["virginia_clemm_poe"]
force-single-line=false
combine-as-imports=true

[tool.ruff.format]
quote-style="double"
indent-style="space"
line-ending="auto"

[tool.uv]
dev-dependencies=[
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "types-beautifulsoup4",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "pydocstyle>=6.3.0",
    "pre-commit>=3.6.0",
    "mkdocs-awesome-pages-plugin>=2.10.1",
]

[tool.mypy]
# Strict type checking configuration for code quality
python_version="3.12"
strict=true
warn_return_any=true
warn_unused_configs=true
warn_redundant_casts=true
warn_unused_ignores=true
warn_no_return=true
warn_unreachable=true
show_error_codes=true
show_column_numbers=true
pretty=true

# Enable additional strictness
check_untyped_defs=true
disallow_any_generics=true
disallow_untyped_calls=true
disallow_untyped_defs=true
disallow_incomplete_defs=true
disallow_untyped_decorators=true
no_implicit_optional=true
no_implicit_reexport=true
strict_optional=true
strict_equality=true

# Handle missing imports for external packages without stubs
[[tool.mypy.overrides]]
module=[
    "playwrightauthor.*",
    "fire",
    "psutil",
    "bs4.*",
    "playwright.*",
]
ignore_missing_imports=true

# Allow some flexibility for specific patterns
[[tool.mypy.overrides]]
module="virginia_clemm_poe.*"
# Allow Any for external API responses and complex data structures
disallow_any_expr=false

# Test files can be more flexible
[[tool.mypy.overrides]]
module="tests.*"
disallow_untyped_defs=false
disallow_incomplete_defs=false
check_untyped_defs=false

[tool.pytest.ini_options]
# Pytest configuration for comprehensive testing
testpaths=["tests"]
python_files=["test_*.py", "*_test.py"]
python_classes=["Test*"]
python_functions=["test_*"]
addopts=[
    "--strict-markers",
    "--strict-config", 
    "--cov=virginia_clemm_poe",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=85",
    "-ra",
    "--tb=short",
]
markers=[
    "slow: marks tests as slow (may require network or browser)",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode="auto"

[tool.coverage.run]
source=["src/virginia_clemm_poe"]
omit=[
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines=[
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
# Security linting configuration  
exclude_dirs=["tests", "old", "external", ".venv"]
skips=[
    "B101",  # assert_used - acceptable in tests and internal validation
    "B603",  # subprocess_without_shell_equals_true - we use shell=False
]

[tool.bandit.assert_used]
skips=["**/test_*.py", "**/tests/**/*.py"]
